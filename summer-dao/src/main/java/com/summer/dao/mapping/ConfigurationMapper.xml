<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.summer.dao.mapper.ConfigurationMapper">
    <resultMap id="BaseResultMap" type="com.summer.dao.entity.Configuration">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="borrow_amount" property="borrowAmount" jdbcType="INTEGER"/>
        <result column="borrow_period" property="borrowPeriod" jdbcType="INTEGER"/>
        <result column="inquire" property="inquire" jdbcType="INTEGER"/>
        <result column="borrow_interest" property="borrowInterest" jdbcType="INTEGER"/>
        <result column="account_management" property="accountManagement" jdbcType="INTEGER"/>
        <result column="actual" property="actual" jdbcType="INTEGER"/>
        <result column="actual_pay" property="actualPay" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="normal_repayment_times" property="normalRepaymentTimes" jdbcType="INTEGER"/>
        <result column="overdue_repayment_times" property="overdueRepaymentTimes" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, user_id, borrow_amount, borrow_period, inquire, borrow_interest, account_management,
    actual, actual_pay, create_time, update_time,normal_repayment_times,overdue_repayment_times
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from platform_configuration
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from platform_configuration
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.summer.dao.entity.Configuration">
    insert into platform_configuration (id, user_id, borrow_amount, 
      borrow_period, inquire, borrow_interest, 
      account_management, actual, actual_pay, 
      create_time, update_time,normal_repayment_times,overdue_repayment_times)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{borrowAmount,jdbcType=INTEGER},
      #{borrowPeriod,jdbcType=INTEGER}, #{inquire,jdbcType=INTEGER}, #{borrowInterest,jdbcType=INTEGER},
      #{accountManagement,jdbcType=INTEGER}, #{actual,jdbcType=INTEGER}, #{actualPay,jdbcType=INTEGER},
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP},
       #{normal_repayment_times,jdbcType=INTEGER},#{overdue_repayment_times,jdbcType=INTEGER})
  </insert>
    <insert id="insertSelective" parameterType="com.summer.dao.entity.Configuration">
        insert into platform_configuration
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="borrowAmount != null">
                borrow_amount,
            </if>
            <if test="borrowPeriod != null">
                borrow_period,
            </if>
            <if test="inquire != null">
                inquire,
            </if>
            <if test="borrowInterest != null">
                borrow_interest,
            </if>
            <if test="accountManagement != null">
                account_management,
            </if>
            <if test="actual != null">
                actual,
            </if>
            <if test="actualPay != null">
                actual_pay,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="normalRepaymentTimes != null">
                normal_repayment_times,
            </if>
            <if test="overdueRepaymentTimes != null">
                overdue_repayment_times
            </if>

        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="borrowAmount != null">
                #{borrowAmount,jdbcType=INTEGER},
            </if>
            <if test="borrowPeriod != null">
                #{borrowPeriod,jdbcType=INTEGER},
            </if>
            <if test="inquire != null">
                #{inquire,jdbcType=INTEGER},
            </if>
            <if test="borrowInterest != null">
                #{borrowInterest,jdbcType=INTEGER},
            </if>
            <if test="accountManagement != null">
                #{accountManagement,jdbcType=INTEGER},
            </if>
            <if test="actual != null">
                #{actual,jdbcType=INTEGER},
            </if>
            <if test="actualPay != null">
                #{actualPay,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="normalRepaymentTimes != null">
                #{normalRepaymentTimes,jdbcType=INTEGER},
            </if>
            <if test="overdueRepaymentTimes != null">
                #{overdueRepaymentTimes,jdbcType=INTEGER}
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.summer.dao.entity.Configuration">
        update platform_configuration
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="borrowAmount != null">
                borrow_amount = #{borrowAmount,jdbcType=INTEGER},
            </if>
            <if test="borrowPeriod != null">
                borrow_period = #{borrowPeriod,jdbcType=INTEGER},
            </if>
            <if test="inquire != null">
                inquire = #{inquire,jdbcType=INTEGER},
            </if>
            <if test="borrowInterest != null">
                borrow_interest = #{borrowInterest,jdbcType=INTEGER},
            </if>
            <if test="accountManagement != null">
                account_management = #{accountManagement,jdbcType=INTEGER},
            </if>
            <if test="actual != null">
                actual = #{actual,jdbcType=INTEGER},
            </if>
            <if test="actualPay != null">
                actual_pay = #{actualPay,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>

            <if test="normalRepaymentTimes != null">
                normal_repayment_times = #{normalRepaymentTimes},
            </if>
            <if test="overdueRepaymentTimes != null">
                overdue_repayment_times = #{overdueRepaymentTimes}
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.summer.dao.entity.Configuration">
    update platform_configuration
    set user_id = #{userId,jdbcType=INTEGER},
      borrow_amount = #{borrowAmount,jdbcType=INTEGER},
      borrow_period = #{borrowPeriod,jdbcType=INTEGER},
      inquire = #{inquire,jdbcType=INTEGER},
      borrow_interest = #{borrowInterest,jdbcType=INTEGER},
      account_management = #{accountManagement,jdbcType=INTEGER},
      actual = #{actual,jdbcType=INTEGER},
      actual_pay = #{actualPay,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
      normal_repayment_times = #{normalRepaymentTimes},
      overdue_repayment_times = #{overdueRepaymentTimes}
    where id = #{id,jdbcType=INTEGER}
  </update>

</mapper>